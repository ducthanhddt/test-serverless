{
  "/Users/thanhdo/hoc_tap/nodejs/dynamodb-crud-api-gateway": {
    "versionSfCore": null,
    "versionFramework": "4.1.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "dynamodb-crud-api",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "stage": "dev",
              "region": "us-west-1",
              "environment": {
                "DYNAMODB_TABLE_NAME": "posts-table-dev"
              },
              "versionFunctions": true
            },
            "plugins": [
              "serverless-dynamodb",
              "serverless-iam-roles-per-function",
              "serverless-offline"
            ],
            "custom": {
              "postsTableName": "posts-table-dev",
              "dynamodb": {
                "stages": [
                  "dev"
                ],
                "start": {
                  "docker": true,
                  "port": 8000,
                  "inMemory": true,
                  "migrate": true,
                  "seed": true,
                  "convertEmptyValues": true
                }
              }
            },
            "functions": {
              "getPost": {
                "handler": "api.getPost",
                "name": "get-post",
                "memorySize": 128,
                "timeout": 5,
                "events": [
                  {
                    "http": {
                      "path": "post/{postId}",
                      "method": "GET"
                    }
                  }
                ],
                "iamRoleStatements": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:GetItem"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "PostsTable",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "createPost": {
                "handler": "api.createPost",
                "name": "create-post",
                "memorySize": 128,
                "timeout": 5,
                "events": [
                  {
                    "http": {
                      "path": "post",
                      "method": "POST"
                    }
                  }
                ],
                "iamRoleStatements": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:PutItem"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "PostsTable",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "updatePost": {
                "handler": "api.updatePost",
                "name": "update-post",
                "memorySize": 128,
                "timeout": 5,
                "events": [
                  {
                    "http": {
                      "path": "post/{postId}",
                      "method": "PUT"
                    }
                  }
                ],
                "iamRoleStatements": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:UpdateItem"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "PostsTable",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "deletePost": {
                "handler": "api.deletePost",
                "name": "delete-post",
                "memorySize": 128,
                "timeout": 5,
                "events": [
                  {
                    "http": {
                      "path": "post/{postId}",
                      "method": "DELETE"
                    }
                  }
                ],
                "iamRoleStatements": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:DeleteItem"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "PostsTable",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "getAllPosts": {
                "handler": "api.getAllPosts",
                "name": "get-all-posts",
                "memorySize": 128,
                "timeout": 5,
                "events": [
                  {
                    "http": {
                      "path": "posts",
                      "method": "GET"
                    }
                  }
                ],
                "iamRoleStatements": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "dynamodb:Scan"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "PostsTable",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            },
            "resources": {
              "Resources": {
                "PostsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "posts-table-dev",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "postId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "postId",
                        "KeyType": "HASH"
                      }
                    ],
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 1,
                      "WriteCapacityUnits": 1
                    }
                  }
                }
              }
            }
          },
          "configFileDirPath": "/Users/thanhdo/hoc_tap/nodejs/dynamodb-crud-api-gateway",
          "config": {
            "type": "self"
          },
          "options": {
            "docker": true
          },
          "stage": "dev",
          "dashboard": null
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/thanhdo/hoc_tap/nodejs/dynamodb-crud-api-gateway",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "dynamodb-crud-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "stage": "dev",
        "region": "us-west-1",
        "environment": {
          "DYNAMODB_TABLE_NAME": "posts-table-dev"
        },
        "versionFunctions": true
      },
      "plugins": [
        "serverless-dynamodb",
        "serverless-iam-roles-per-function",
        "serverless-offline"
      ],
      "custom": {
        "postsTableName": "posts-table-dev",
        "dynamodb": {
          "stages": [
            "dev"
          ],
          "start": {
            "docker": true,
            "port": 8000,
            "inMemory": true,
            "migrate": true,
            "seed": true,
            "convertEmptyValues": true
          }
        }
      },
      "functions": {
        "getPost": {
          "handler": "api.getPost",
          "name": "get-post",
          "memorySize": 128,
          "timeout": 5,
          "events": [
            {
              "http": {
                "path": "post/{postId}",
                "method": "GET"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PostsTable",
                  "Arn"
                ]
              }
            }
          ]
        },
        "createPost": {
          "handler": "api.createPost",
          "name": "create-post",
          "memorySize": 128,
          "timeout": 5,
          "events": [
            {
              "http": {
                "path": "post",
                "method": "POST"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PostsTable",
                  "Arn"
                ]
              }
            }
          ]
        },
        "updatePost": {
          "handler": "api.updatePost",
          "name": "update-post",
          "memorySize": 128,
          "timeout": 5,
          "events": [
            {
              "http": {
                "path": "post/{postId}",
                "method": "PUT"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:UpdateItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PostsTable",
                  "Arn"
                ]
              }
            }
          ]
        },
        "deletePost": {
          "handler": "api.deletePost",
          "name": "delete-post",
          "memorySize": 128,
          "timeout": 5,
          "events": [
            {
              "http": {
                "path": "post/{postId}",
                "method": "DELETE"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PostsTable",
                  "Arn"
                ]
              }
            }
          ]
        },
        "getAllPosts": {
          "handler": "api.getAllPosts",
          "name": "get-all-posts",
          "memorySize": 128,
          "timeout": 5,
          "events": [
            {
              "http": {
                "path": "posts",
                "method": "GET"
              }
            }
          ],
          "iamRoleStatements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PostsTable",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "PostsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "posts-table-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "postId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "postId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        }
      }
    },
    "serviceRawFile": "service: dynamodb-crud-api\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  stage: dev\n  region: us-west-1\n  environment:\n    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}\n  \nplugins:\n  - serverless-dynamodb\n  - serverless-iam-roles-per-function\n  - serverless-offline\n\ncustom:\n  postsTableName: posts-table-${self:provider.stage}\n  dynamodb:\n  # If you only want to use DynamoDB Local in some stages, declare them here\n    stages:\n      - dev\n    start:\n      docker: true\n      port: 8000\n      inMemory: true\n      migrate: true\n      seed: true\n      convertEmptyValues: true\n    # Uncomment only if you already have a DynamoDB running locally\n    # noStart: true\n\nfunctions:\n  getPost:\n    handler: api.getPost\n    name: get-post\n    memorySize: 128 # mb\n    timeout: 5 # seconds\n    events:\n      - http:\n          path: post/{postId}\n          method: GET\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"dynamodb:GetItem\"\n        Resource: !GetAtt PostsTable.Arn\n  createPost:\n    handler: api.createPost\n    name: create-post\n    memorySize: 128 # mb\n    timeout: 5 # seconds\n    events:\n      - http:\n          path: post\n          method: POST\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"dynamodb:PutItem\"\n        Resource: !GetAtt PostsTable.Arn\n  updatePost:\n    handler: api.updatePost\n    name: update-post\n    memorySize: 128 # mb\n    timeout: 5 # seconds\n    events:\n      - http:\n          path: post/{postId}\n          method: PUT\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"dynamodb:UpdateItem\"\n        Resource: !GetAtt PostsTable.Arn\n  deletePost:\n    handler: api.deletePost\n    name: delete-post\n    memorySize: 128 # mb\n    timeout: 5 # seconds\n    events:\n      - http:\n          path: post/{postId}\n          method: DELETE\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"dynamodb:DeleteItem\"\n        Resource: !GetAtt PostsTable.Arn\n  getAllPosts:\n    handler: api.getAllPosts\n    name: get-all-posts\n    memorySize: 128 # mb\n    timeout: 5 # seconds\n    events:\n      - http:\n          path: posts\n          method: GET\n    iamRoleStatements:\n      - Effect: \"Allow\"\n        Action:\n          - \"dynamodb:Scan\"\n        Resource: !GetAtt PostsTable.Arn\n\nresources:\n  Resources:\n    PostsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:custom.postsTableName}\n        AttributeDefinitions:\n          - AttributeName: postId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: postId\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n",
    "command": [
      "dynamodb",
      "start"
    ],
    "options": {
      "docker": true
    },
    "error": null,
    "params": {},
    "machineId": "921a70d8da25af94eb4be5a04535bb6c",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "c89a8a51-9afe-4328-bd1e-38a842ec634a",
    "orgName": "thanhdoserverless",
    "userId": "xydmNnBJRJsb74f2Bg",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "thanhdoserverless",
    "subscription": null,
    "userEmail": "hacdeddt@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "835477915162",
    "versionSf": "4.1.4",
    "serviceProviderAwsCfStackName": "dynamodb-crud-api-dev",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}