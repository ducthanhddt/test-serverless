service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  # profile: test-serverless
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
    NOTES_TABLE_NAME: ${self:custom.notesTableName}

plugins:
  - serverless-dynamodb
  - serverless-iam-roles-per-function
  - serverless-offline

custom:
  postsTableName: posts-table-${self:provider.stage}
  notesTableName: notes-table-${self:provider.stage}
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev:
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  getPost:
    handler: apis.getPost
    name: get-post-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  createPost:
    handler: apis.createPost
    name: create-post-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: apis.updatePost
    name: update-post-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
  deletePost:
    handler: apis.deletePost
    name: delete-post-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllPosts:
    handler: apis.getAllPosts
    name: get-all-posts-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn
  getAllNotes:
    handler: apis.getAllNotes
    name: get-all-notes-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: notes
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt NotesTable.Arn
  createMock:
    handler: apis.createMock
    name: create-mock-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: create_mock
          method: POST
  getAllMocks:
    handler: apis.getAllMocks
    name: get-all-mock-${opt:stage, 'dev'}
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: mocks
          method: GET

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notesTableName}
        AttributeDefinitions:
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: noteId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
